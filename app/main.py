from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from app.db.base import Base 
from app.db.session import engine 
from app.models import item, category # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–¥–µ—Å—å
from app.api.v1.endpoints import items, categories, orders, uploads # –î–æ–±–∞–≤–ª–µ–Ω uploads
from app.core.config import settings

# üí° –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –¢–ï–õ–ï–ì–†–ê–ú WEBHOOK
from bot import bot, dp # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ bot.py
import logging
from aiogram.types import Update

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î.
# –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–¥–µ–ª–∏ –∏–∑ item, category, order, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—à–µ!
Base.metadata.create_all(bind=engine) 

app = FastAPI(
    title="Telegram Mini App Shop Backend",
    version="1.0.0",
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
origins = [
    "http://127.0.0.1:5500", 
    "http://localhost:5500",
    "http://127.0.0.1:8888",
    "http://127.0.0.1:8000",
    "*"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–ß–ï–°–ö–û–ô –ü–ê–ü–ö–ò (–¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
app.mount("/static/images", StaticFiles(directory="uploaded_images"), name="static_images")


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –¥–ª—è API
app.include_router(items.router, prefix="/api/v1/items", tags=["Items (Products)"])
app.include_router(categories.router, prefix="/api/v1", tags=["Categories"])
app.include_router(orders.router, prefix="/api/v1", tags=["orders"])
app.include_router(uploads.router, prefix="/api/v1", tags=["File Uploads"]) # –†–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

# --------------------------------------------------------------------------------------
# --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–õ–ï–ì–†–ê–ú WEBHOOK ---
# --------------------------------------------------------------------------------------

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –ø—É—Ç—å –∫ –≤–µ–±—Ö—É–∫—É
WEBHOOK_PATH = "/webhook"
# –ü–æ–ª–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º Telegram (–ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ WEBHOOK_URL –≤ config.py)
# settings.WEBHOOK_URL –±—É–¥–µ—Ç –≤–∞—à–∏–º –ø—É–±–ª–∏—á–Ω—ã–º –¥–æ–º–µ–Ω–æ–º Railway.
FULL_WEBHOOK_URL = settings.WEBHOOK_URL.rstrip('/') + WEBHOOK_PATH

@app.on_event("startup")
async def on_startup():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    if not settings.WEBHOOK_URL:
        logger.warning("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Webhook –Ω–µ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.")
        return

    try:
        current_webhook = await bot.get_webhook_info()
        
        if current_webhook.url != FULL_WEBHOOK_URL:
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {FULL_WEBHOOK_URL}")
            await bot.set_webhook(
                url=FULL_WEBHOOK_URL,
                drop_pending_updates=True, # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                max_connections=40 
            )
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            logger.info("–í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–∫—Ç—É–∞–ª–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)."""
    logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
    await bot.session.close()


@app.post(WEBHOOK_PATH)
async def bot_webhook(request: Request):
    """–†–æ—É—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        telegram_update = await request.json()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç Update aiogram
        update = Update(**telegram_update)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await dp.feed_update(bot, update)
        
        # Telegram –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –º—ã –æ—Ç–≤–µ—Ç–∏–º 200 OK –±—ã—Å—Ç—Ä–æ.
        return {"ok": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebHook: {e}")
        return {"ok": False, "error": str(e)}

# --------------------------------------------------------------------------------------

@app.get("/")
def read_root():
    return {"message": "Welcome to the Telegram Mini App Shop Backend! API and Webhook are running."}
