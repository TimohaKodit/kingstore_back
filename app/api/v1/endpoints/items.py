# from fastapi import APIRouter, Depends, HTTPException
# from sqlalchemy.orm import Session
# from typing import List

# from app.schemas.item import Item as ItemSchema, ItemCreate, ItemUpdate
# from app.models.item import Item as ItemModel
# from app.crud import item as crud_item
# from app.dependencies import get_db

# router = APIRouter()

# # --- –†–æ—É—Ç—ã –¥–ª—è –ö–ª–∏–µ–Ω—Ç–∞ (Telegram Mini App) ---
# @router.get("/", response_model=List[ItemSchema])
# def read_active_items(db: Session = Depends(get_db), skip: int = 0, limit: int = 100):
#     """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)."""
#     items = crud_item.get_active_items(db, skip=skip, limit=limit)
#     return items

# @router.get("/{item_id}", response_model=ItemSchema)
# def read_item(item_id: int, db: Session = Depends(get_db)):
#     """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ ID."""
#     db_item = crud_item.get_item(db, item_id=item_id)
#     if db_item is None:
#         raise HTTPException(status_code=404, detail="Item not found")
#     return db_item

# # --- –†–æ—É—Ç—ã –¥–ª—è –ê–¥–º–∏–Ω–∞ (–î–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!) ---
# @router.post("/", response_model=ItemSchema, status_code=201)
# def create_item(item: ItemCreate, db: Session = Depends(get_db)):
#     """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä."""
#     return crud_item.create_item(db=db, item=item)

# @router.put("/{item_id}", response_model=ItemSchema)
# def update_item(item_id: int, item: ItemUpdate, db: Session = Depends(get_db)):
#     """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä."""
#     db_item = crud_item.get_item(db, item_id=item_id)
#     if db_item is None:
#         raise HTTPException(status_code=404, detail="Item not found")
#     return crud_item.update_item(db=db, db_item=db_item, item_update=item)
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List, Any

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ö–µ–º –∏ –º–æ–¥–µ–ª–µ–π
from app.schemas.item import Item as ItemSchema, ItemCreate, ItemUpdate
from app.models.item import Item as ItemModel
# üí° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
from app.crud import item as crud_item 
from app.dependencies import get_db

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
from app.schemas.category import CATEGORY_MAP 

router = APIRouter()

# ----------------------------------------------------------------------
# üí° –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–ù–ï–î–†–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ò –ò –û–ë–†–ê–ë–û–¢–ö–ò URL-–ê–î–†–ï–°–û–í
# ----------------------------------------------------------------------
def _add_category_to_item(db_item: ItemModel) -> ItemSchema:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç ItemModel (SQLAlchemy) –≤ ItemSchema (Pydantic),
    –¥–æ–±–∞–≤–ª—è—è –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Category –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è —Å—Ç—Ä–æ–∫—É URL –≤ —Å–ø–∏—Å–æ–∫.
    """
    category_data = CATEGORY_MAP.get(db_item.category_id)
    
    if not category_data:
        print(f"ERROR: Item ID {db_item.id} has invalid category_id {db_item.category_id}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
            detail=f"Invalid category ID in database for item {db_item.id}. Category ID: {db_item.category_id}"
        )

    # üí° –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É image_urls –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ List[str]
    image_urls_list = crud_item._str_to_list(db_item.image_url)
    
    # 2. –°–æ–∑–¥–∞–µ–º Pydantic-—Å—Ö–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –∞—Ç—Ä–∏–±—É—Ç—ã SQLAlchemy –æ–±—ä–µ–∫—Ç–∞ 
    #    –∏ –≤—Ä—É—á–Ω—É—é –≤–Ω–µ–¥—Ä—è—è 'category' –∏ —Å–ø–∏—Å–æ–∫ 'image_urls'.
    item_data = db_item.__dict__.copy()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ 'image_urls' –Ω–∞ List[str]
    item_data['image_urls'] = image_urls_list 
    
    # –°–æ–∑–¥–∞–µ–º Pydantic-–æ–±—ä–µ–∫—Ç
    return ItemSchema(
        **item_data, 
        category=category_data
    )

# ----------------------------------------------------------------------
# --- –†–æ—É—Ç—ã –¥–ª—è –ö–ª–∏–µ–Ω—Ç–∞ (Telegram Mini App) ---
# ----------------------------------------------------------------------
@router.get("/", response_model=List[ItemSchema])
def read_active_items(db: Session = Depends(get_db), skip: int = 0, limit: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)."""
    db_items = crud_item.get_active_items(db, skip=skip, limit=limit)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ø–∏—Å–∫–∞ URL
    return [_add_category_to_item(item) for item in db_items]

@router.get("/{item_id}", response_model=ItemSchema)
def read_item(item_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ ID."""
    db_item = crud_item.get_item(db, item_id=item_id)
    
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    return _add_category_to_item(db_item)

# ----------------------------------------------------------------------
# --- –†–æ—É—Ç—ã –¥–ª—è –ê–¥–º–∏–Ω–∞ ---
# ----------------------------------------------------------------------

@router.post("/", response_model=ItemSchema, status_code=status.HTTP_201_CREATED)
def create_item(item: ItemCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä."""
    db_item = crud_item.create_item(db=db, item=item)
    return _add_category_to_item(db_item) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π Pydantic –æ–±—ä–µ–∫—Ç

@router.put("/{item_id}", response_model=ItemSchema)
def update_item(item_id: int, item: ItemUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä."""
    db_item = crud_item.get_item(db, item_id=item_id)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
        
    updated_item = crud_item.update_item(db=db, db_item=db_item, item_update=item)
    return _add_category_to_item(updated_item) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π Pydantic –æ–±—ä–µ–∫—Ç
