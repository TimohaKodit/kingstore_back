# from pydantic import BaseModel, Field
# from typing import Optional

# # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
# from .category import Category as CategorySchema 

# # –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞
# class ItemBase(BaseModel):
#     name: str = Field(..., max_length=100)
#     description: Optional[str] = None
#     price: float = Field(..., gt=0)
#     image_url: Optional[str] = None
#     is_active: bool = True
    
#     # --- –ù–û–í–´–ï –ü–û–õ–Ø ---
#     category_id: int # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
#     memory: Optional[str] = None
#     color: Optional[str] = None

# # –°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (POST –∑–∞–ø—Ä–æ—Å—ã)
# class ItemCreate(ItemBase):
#     pass

# # –°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (PUT/PATCH –∑–∞–ø—Ä–æ—Å—ã)
# class ItemUpdate(ItemBase):
#     name: Optional[str] = None
#     price: Optional[float] = None
#     category_id: Optional[int] = None # –¢–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
#     # –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

# # –°—Ö–µ–º–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—É)
# class Item(ItemBase):
#     id: int 
#     # –ó–∞–º–µ–Ω—è–µ–º category_id –Ω–∞ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç Category –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
#     category: CategorySchema # <--- –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

#     # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å –≤–ª–æ–∂–µ–Ω—ã –≤ category
#     # category_id –Ω–µ –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º `category`

#     class Config:
#         from_attributes = True
import json
from sqlalchemy import Column, Integer, String, Float, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.hybrid import hybrid_property
from typing import List

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
from app.db.base import Base

class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, nullable=True)
    price = Column(Float)
    is_active = Column(Boolean, default=True)
    category_id = Column(Integer, ForeignKey("categories.id"), nullable=True)

    # üí° –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä—ã—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ URL –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∏
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å List[str] –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ —Ç–∏–ø–∞ String.
    _image_urls = Column('image_urls', String, nullable=True, default='[]') 

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    variants = relationship("ItemVariant", back_populates="item", cascade="all, delete-orphan")
    category = relationship("Category", back_populates="items")
    
    # üí° @hybrid_property: –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–ª–µ–º –∫–∞–∫ —Å List[str] –≤ Python-–∫–æ–¥–µ
    @hybrid_property
    def image_urls(self) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ (GET)."""
        if self._image_urls:
            try:
                # json.loads() –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str, dict, list (—Ç.–µ. [] –∏–ª–∏ None)
                return json.loads(self._image_urls) or []
            except json.JSONDecodeError:
                return []
        return []

    @image_urls.setter
    def image_urls(self, urls: List[str]):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ JSON-—Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ (POST/PUT)."""
        if urls is not None:
            self._image_urls = json.dumps(urls)
        else:
            self._image_urls = '[]'
            
    def __repr__(self):
        return f"<Item(name='{self.name}', price={self.price}, image_urls='{self.image_urls}')>"


class ItemVariant(Base):
    __tablename__ = "item_variants"

    id = Column(Integer, primary_key=True, index=True)
    item_id = Column(Integer, ForeignKey("items.id"))
    memory = Column(String, nullable=True)
    color = Column(String, nullable=True)
    price_modifier = Column(Float, default=0.0)

    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏ Item
    item = relationship("Item", back_populates="variants")

