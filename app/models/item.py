import json
from sqlalchemy import Column, Integer, String, Float, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.hybrid import hybrid_property
from typing import List

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
from app.db.base import Base

class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, nullable=True)
    price = Column(Float)
    is_active = Column(Boolean, default=True)
    category_id = Column(Integer, ForeignKey("categories.id"), nullable=True)

    # üí° –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä—ã—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ URL –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∏
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å List[str] –≤ –æ–¥–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ —Ç–∏–ø–∞ String.
    _image_urls = Column('image_urls', String, nullable=True, default='[]') 

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
    variants = relationship("ItemVariant", back_populates="item", cascade="all, delete-orphan")
    category = relationship("Category", back_populates="items")
    
    # üí° @hybrid_property: –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–ª–µ–º –∫–∞–∫ —Å List[str] –≤ Python-–∫–æ–¥–µ
    @hybrid_property
    def image_urls(self) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ (GET)."""
        if self._image_urls:
            try:
                # json.loads() –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str, dict, list (—Ç.–µ. [] –∏–ª–∏ None)
                return json.loads(self._image_urls) or []
            except json.JSONDecodeError:
                return []
        return []

    @image_urls.setter
    def image_urls(self, urls: List[str]):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ JSON-—Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ (POST/PUT)."""
        if urls is not None:
            self._image_urls = json.dumps(urls)
        else:
            self._image_urls = '[]'
            
    def __repr__(self):
        return f"<Item(name='{self.name}', price={self.price}, image_urls='{self.image_urls}')>"


class ItemVariant(Base):
    __tablename__ = "item_variants"

    id = Column(Integer, primary_key=True, index=True)
    item_id = Column(Integer, ForeignKey("items.id"))
    memory = Column(String, nullable=True)
    color = Column(String, nullable=True)
    price_modifier = Column(Float, default=0.0)

    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏ Item
    item = relationship("Item", back_populates="variants")
