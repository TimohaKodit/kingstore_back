# from sqlalchemy.orm import Session
# from app.models.item import Item
# from app.schemas.item import ItemCreate, ItemUpdate
# from typing import List, Optional

# def get_item(db: Session, item_id: int) -> Optional[Item]:
#     """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID."""
#     return db.query(Item).filter(Item.id == item_id).first()

# def get_active_items(db: Session, skip: int = 0, limit: int = 100) -> List[Item]:
#     """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)."""
#     return db.query(Item).filter(Item.is_active == True).offset(skip).limit(limit).all()

# def create_item(db: Session, item: ItemCreate) -> Item:
#     """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä."""
#     db_item = Item(**item.model_dump())
#     db.add(db_item)
#     db.commit()
#     db.refresh(db_item)
#     return db_item

# def update_item(db: Session, db_item: Item, item_update: ItemUpdate) -> Item:
#     """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä."""
#     update_data = item_update.model_dump(exclude_unset=True)
#     for key, value in update_data.items():
#         setattr(db_item, key, value)
    
#     db.add(db_item)
#     db.commit()
#     db.refresh(db_item)
#     return db_item

from sqlalchemy.orm import Session
from typing import List, Optional

from app.models.item import Item as ItemModel
from app.schemas.item import ItemCreate, ItemUpdate

# ----------------------------------------------------------------------
# üí° –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Image URLs
# ----------------------------------------------------------------------

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è (,) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ, 
# –Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, "|||".
def _list_to_str(image_urls: List[str]) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏."""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return ",".join(url.strip() for url in image_urls if url.strip())

def _str_to_list(image_urls_str: Optional[str]) -> List[str]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏, –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤."""
    if not image_urls_str:
        return []
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    return [url.strip() for url in image_urls_str.split(',') if url.strip()]

# ----------------------------------------------------------------------
# --- CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ ---
# ----------------------------------------------------------------------

def get_item(db: Session, item_id: int) -> Optional[ItemModel]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID."""
    return db.query(ItemModel).filter(ItemModel.id == item_id).first()

def get_active_items(db: Session, skip: int = 0, limit: int = 100) -> List[ItemModel]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    return db.query(ItemModel).filter(ItemModel.is_active == True).offset(skip).limit(limit).all()

def create_item(db: Session, item: ItemCreate) -> ItemModel:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É—è model_dump –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –ø–æ–ª–µ–π."""
    
    # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ URL –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    image_urls_str = _list_to_str(item.image_urls)
    
    # 2. üí° –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª—è,
    # –∏—Å–∫–ª—é—á–∞—è 'image_urls' (–∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º)
    item_data = item.model_dump(exclude={'image_urls'})

    # 3. –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫—É URL
    db_item = ItemModel(
        **item_data,
        image_url=image_urls_str  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –ë–î (image_url)
    )
    
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item

def update_item(db: Session, db_item: ItemModel, item_update: ItemUpdate) -> ItemModel:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä."""
    update_data = item_update.model_dump(exclude_unset=True)

    # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ URL-–∞–¥—Ä–µ—Å–æ–≤.
    if 'image_urls' in update_data:
        image_urls_list = update_data.pop('image_urls')
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ URL –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î.
        # –ó–∞–º–µ–Ω—è–µ–º Pydantic-–∫–ª—é—á 'image_urls' –Ω–∞ SQLAlchemy-–∫–ª—é—á 'image_url'.
        update_data['image_url'] = _list_to_str(image_urls_list) 

    for key, value in update_data.items():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setattr(db_item, key, value)
        
    db.commit()
    db.refresh(db_item)
    return db_item

def delete_item(db: Session, item_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä."""
    db_item = db.query(ItemModel).filter(ItemModel.id == item_id).first()
    if db_item:
        db.delete(db_item)
        db.commit()
        return {"ok": True}
    return None