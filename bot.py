import os
import sys
import httpx
import logging
import asyncio
import io 
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ò–ú–ü–û–†–¢ –ò–ó –ù–ê–°–¢–†–û–ï–ö ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω—É –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
from app.core.config import settings 

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ settings
BOT_TOKEN = settings.BOT_TOKEN
ADMIN_ID = settings.ADMIN_ID
# –í–Ω–∏–º–∞–Ω–∏–µ: API_URL –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å FastAPI 
# —á–µ—Ä–µ–∑ Webhook, –∞ FastAPI, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
API_URL = settings.API_URL # –û—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –±–æ—Ç—É 

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ Aiogram (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ main.py) ---
bot = Bot(token=BOT_TOKEN)
dispatcher = Dispatcher()
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class ItemCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."""
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_description = State()
    waiting_for_category_id = State()
    waiting_for_is_active = State()
    waiting_for_main_image_url = State()
    waiting_for_additional_images = State()
    waiting_for_memory_options = State()
    waiting_for_color_options = State()


# ----------------------------------------------------------------------
# --- –†–æ—É—Ç—ã –ë–æ—Ç–∞ ---
# ----------------------------------------------------------------------

@router.message(Command("start"))
async def command_start_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. 
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—à–µ Mini App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üõç –û—Ç–∫—Ä—ã—Ç—å –ú–∞–≥–∞–∑–∏–Ω", 
                # !!! –í–ê–ñ–ù–û !!! URL –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL Mini App, 
                # –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —á–µ—Ä–µ–∑ @BotFather. 
                # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º API_URL, –Ω–æ –µ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω.
                web_app=types.WebAppInfo(url=f"{settings.WEBAPP_URL}")
            )
        ]
    ])

    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n\n"
        "–≠—Ç–æ Telegram-–º–∞–≥–∞–∑–∏–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.",
        reply_markup=keyboard
    )
    
@router.message(Command("admin"))
async def command_admin_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).
    """
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admin_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/add_item")],
            [KeyboardButton(text="/stats")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )
    
    await message.answer(
        "üõ† *–ú–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* üõ†\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="Markdown"
    )
