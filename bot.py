import os
import sys
import httpx
import logging
import asyncio
import io 
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ö–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ .env ---
load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ß–∏—Ç–∞–µ–º ADMIN_ID. –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, 
# –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.
ADMIN_ID_RAW = os.getenv("ADMIN_ID")
if ADMIN_ID_RAW:
    try:
        ADMIN_ID = int(ADMIN_ID_RAW)
    except ValueError:
        logging.error(f"–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ ADMIN_ID –≤ .env ('{ADMIN_ID_RAW}') –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        ADMIN_ID = 0
else:
    ADMIN_ID = 0

API_URL = os.getenv("API_URL", "http://127.0.0.1:8888/api/v1") 

# --- FSM States ---
class AddCategoryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    waiting_for_name = State()

class AddAccessoryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–º—è, —Ü–µ–Ω–∞, —Ñ–æ—Ç–æ)."""
    waiting_for_price = State()
    waiting_for_photo = State() 
    
class AddItemStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–°–õ–û–ñ–ù–´–ô –ü–û–¢–û–ö).
    """
    waiting_for_name = State() # –û–∂–∏–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    waiting_for_category_id = State() # –û–∂–∏–¥–∞–Ω–∏–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    waiting_for_flow_choice = State() # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Ç–æ–∫–∞ (—Å–ª–æ–∂–Ω—ã–π/–ø—Ä–æ—Å—Ç–æ–π)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    waiting_for_variant_start = State() # –ó–∞–ø—É—Å–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
    waiting_for_variant_memory = State()
    waiting_for_variant_colors_list = State() # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¶–µ–Ω—ã/–§–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    waiting_for_color_price = State() 
    waiting_for_color_photo = State() 
    

class DeleteItemStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    waiting_for_item_id = State()
    
class UpdateItemPriceStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞."""
    waiting_for_item_id = State()
    waiting_for_new_price = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ –∏ –†–æ—É—Ç–µ—Ä ---
router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID

async def get_categories(client: httpx.AsyncClient) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –±—ç–∫–µ–Ω–¥–∞."""
    try:
        response = await client.get(f"{API_URL}/categories/")
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        logging.error(f"Error fetching categories: {e}")
        return []

async def get_items(client: httpx.AsyncClient) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞."""
    try:
        response = await client.get(f"{API_URL}/items/")
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        logging.error(f"Error fetching items: {e}")
        return []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–°–õ–û–ñ–ù–´–ô –ü–û–¢–û–ö)
KEYBOARD_VARIANT_CHOICE = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏", callback_data="add_variant"),
    ],
    [
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="finish_item"),
    ]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ç–æ–∫–∞
KEYBOARD_FLOW_CHOICE = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± –°–ª–æ–∂–Ω—ã–π —Ç–æ–≤–∞—Ä (–ü–∞–º—è—Ç—å/–¶–≤–µ—Ç)", callback_data="flow_complex")],
    [InlineKeyboardButton(text="üõ†Ô∏è –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–≤–∞—Ä (–ê–∫—Å–µ—Å—Å—É–∞—Ä)", callback_data="flow_simple")],
])


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
KEYBOARD_SKIP_PHOTO = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ")]],
    resize_keyboard=True, one_time_keyboard=True
)

# ----------------------------------------------------------------------
# --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ ---
# ----------------------------------------------------------------------
@router.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help."""
    if is_admin(message.from_user.id):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "**/–∫–∞—Ç_–Ω–æ–≤—É—é** - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "**/—Ç–æ–≤–∞—Ä_–Ω–æ–≤—ã–π** - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n"
            "**/—Ç–æ–≤–∞—Ä_—É–¥–∞–ª–∏** - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID\n"
            "**/—Ç–æ–≤–∞—Ä_—Ü–µ–Ω–∞** - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n"
            "**/cancel** - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.")

@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""
    if is_admin(message.from_user.id):
        current_state = await state.get_state()
        if current_state is None:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        # –£–¥–∞–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove()) 
        await state.clear()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        
# ----------------------------------------------------------------------
# --- 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (/–∫–∞—Ç_–Ω–æ–≤—É—é) ---
# ----------------------------------------------------------------------
@router.message(Command("–∫–∞—Ç_–Ω–æ–≤—É—é"))
async def cmd_add_category(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddCategoryStates.waiting_for_name)

@router.message(AddCategoryStates.waiting_for_name, F.text)
async def process_category_name(message: types.Message, state: FSMContext):
    category_name = message.text
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{API_URL}/categories/",
                json={"name": category_name}
            )
            response.raise_for_status()
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {response.json()['id']}).")
        except httpx.HTTPStatusError as e:
            logging.error(f"Category creation failed: {e.response.text}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        except Exception as e:
            logging.error(f"API connection error: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API.")
    await state.clear()

# ----------------------------------------------------------------------
# --- 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–∞ (/—Ç–æ–≤–∞—Ä_–Ω–æ–≤—ã–π) --- 
# ----------------------------------------------------------------------

# –®–ê–ì 1: –ó–∞–ø—Ä–æ—Å –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
@router.message(Command("—Ç–æ–≤–∞—Ä_–Ω–æ–≤—ã–π"))
async def cmd_add_item(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.update_data(variants=[]) 
    await message.answer("–í–≤–µ–¥–∏—Ç–µ **–±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ** —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'iPhone 15 Pro' –∏–ª–∏ '–ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ'):")
    await state.set_state(AddItemStates.waiting_for_name)

# –®–ê–ì 2: –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(AddItemStates.waiting_for_name, F.text)
async def process_item_name(message: types.Message, state: FSMContext):
    await state.update_data(base_name=message.text)
    async with httpx.AsyncClient() as client:
        categories = await get_categories(client)
        if not categories:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.")
            await state.clear()
            return
        category_map = {str(c['id']): c['name'] for c in categories}
        await state.update_data(category_map=category_map)
        category_names = "\n".join([f"ID: {id} -> {name}" for id, name in category_map.items()])
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n{category_names}")
    await state.set_state(AddItemStates.waiting_for_category_id)

# –®–ê–ì 3: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ (–°–õ–û–ñ–ù–´–ô / –ü–†–û–°–¢–û–ô)
@router.message(AddItemStates.waiting_for_category_id, F.text)
async def process_item_category(message: types.Message, state: FSMContext):
    category_id_str = message.text.strip()
    data = await state.get_data()
    category_map = data.get('category_map', {})
    
    if category_id_str not in category_map:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    try:
        category_id = int(category_id_str)
        category_name = category_map[category_id_str]
        await state.update_data(category_id=category_id, category_name=category_name)
        
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: **{category_name}** (ID: {category_id}). \n"
            "–≠—Ç–æ **—Å–ª–æ–∂–Ω—ã–π** —Ç–æ–≤–∞—Ä (—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–º—è—Ç–∏ –∏ —Ü–≤–µ—Ç–∞) –∏–ª–∏ **–ø—Ä–æ—Å—Ç–æ–π** (–∞–∫—Å–µ—Å—Å—É–∞—Ä)?"
            , reply_markup=KEYBOARD_FLOW_CHOICE
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–∂–∏–¥–∞—è –≤—ã–±–æ—Ä –ø–æ—Ç–æ–∫–∞
        await state.set_state(AddItemStates.waiting_for_flow_choice)
        
    except ValueError:
        await message.answer("‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ----------------------------------------------------------------------
# –ü–†–û–°–¢–û–ô –ü–û–¢–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê (–ê–ö–°–ï–°–°–£–ê–†)
# ----------------------------------------------------------------------

@router.callback_query(AddItemStates.waiting_for_flow_choice, F.data == "flow_simple")
async def start_simple_flow(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–∞–∫—Å–µ—Å—Å—É–∞—Ä)."""
    await callback_query.answer("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"Failed to remove markup: {e}")
        
    data = await state.get_data()
    await callback_query.message.answer(
        f"–¢–æ–≤–∞—Ä: **{data['base_name']}** ({data['category_name']}). \n"
        "–í–≤–µ–¥–∏—Ç–µ **—Ü–µ–Ω—É** –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä., 50.99):"
    )
    await state.set_state(AddAccessoryStates.waiting_for_price)

@router.message(AddAccessoryStates.waiting_for_price, F.text)
async def process_accessory_price(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ."""
    try:
        price = float(message.text.replace(',', '.').strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        
        await state.update_data(accessory_price=price)
        
        await message.answer(
            f"–¶–µ–Ω–∞ **{price}** —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. \n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é** –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.",
            reply_markup=KEYBOARD_SKIP_PHOTO
        )
        await state.set_state(AddAccessoryStates.waiting_for_photo)
        
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(AddAccessoryStates.waiting_for_photo, F.photo | F.text)
async def process_accessory_photo(message: types.Message, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    
    data = await state.get_data()
    item_name = data['base_name']
    
    uploaded_urls = []
    is_photo = message.photo and len(message.photo) > 0
    is_skip = message.text and message.text.strip() == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
    
    # –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –ë–ï–ó–û–ü–ê–°–ù–´–ú –°–ü–û–°–û–ë–û–ú
    await message.answer("...", reply_markup=types.ReplyKeyboardRemove()) 

    if is_photo:
        await message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ '{item_name}'...")
        
        # --- –õ–û–ì–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û–ì–†–ê–§–ò–ò –ù–ê –°–ï–†–í–ï–† ---
        photo_file = message.photo[-1]
        file_id = photo_file.file_id
        
        file_buffer = None
        try:
            file_info = await bot.get_file(file_id)
            file_buffer = io.BytesIO() 
            await bot.download_file(file_info.file_path, file_buffer)
            file_buffer.seek(0)
            
            # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
            filename = f"Accessory_{item_name.replace(' ', '_')}.jpg" 
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{API_URL}/upload/images/",
                    files={"files": (filename, file_buffer, 'image/jpeg')} 
                )
                response.raise_for_status()
                uploaded_urls = response.json() 
                
            await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–ª—è '{item_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            
        except httpx.HTTPStatusError as e:
            logging.error(f"Upload failed: {e.response.text}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ.")
            await state.set_state(AddAccessoryStates.waiting_for_photo)
            await message.answer(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è '{item_name}' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.", reply_markup=KEYBOARD_SKIP_PHOTO)
            return
        except Exception as e:
            logging.error(f"Bot file download error: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await state.set_state(AddAccessoryStates.waiting_for_photo)
            await message.answer(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è '{item_name}' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.", reply_markup=KEYBOARD_SKIP_PHOTO)
            return
        finally:
            if file_buffer:
                file_buffer.close()
    
    elif is_skip:
        await message.answer(f"‚è© –§–æ—Ç–æ –¥–ª—è '{item_name}' –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ —Ç–µ–∫—Å—Ç "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        await message.answer("‚ùå –û–∂–∏–¥–∞—é **—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é** –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=KEYBOARD_SKIP_PHOTO)
        await state.set_state(AddAccessoryStates.waiting_for_photo)
        return
        
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    price = data['accessory_price']
    
    item_data = {
        "name": item_name,
        "description": "", # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "price": price,
        "category_id": data['category_id'],
        "memory": None, 
        "color": None,  
        "image_urls": uploaded_urls, # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL-—ã, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        "is_active": True
    }

    await message.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –∞–∫—Å–µ—Å—Å—É–∞—Ä...")

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{API_URL}/items/",
                json=item_data
            )
            response.raise_for_status()

            await message.answer(
                f"‚úÖ –ê–∫—Å–µ—Å—Å—É–∞—Ä '{item_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"ID: {response.json()['id']}, –¶–µ–Ω–∞: {price}"
            )
    except httpx.HTTPStatusError as e:
        logging.error(f"Simple item creation failed: {e.response.text}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        logging.error(f"API connection error: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API.")

    await state.clear()


# ----------------------------------------------------------------------
# –°–õ–û–ñ–ù–´–ô –ü–û–¢–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê (–¢–ï–õ–ï–§–û–ù)
# ----------------------------------------------------------------------

@router.callback_query(AddItemStates.waiting_for_flow_choice, F.data == "flow_complex")
async def start_complex_flow(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)."""
    await callback_query.answer("–ó–∞–ø—É—Å–∫ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞...")
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"Failed to remove markup: {e}")
        
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    await ask_for_next_variant_step(callback_query.message, state)


# –¶–ò–ö–õ–ò–ß–ï–°–ö–ê–Ø –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–ê–†–ò–ê–ù–¢–û–í (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def ask_for_next_variant_step(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å."""
    data = await state.get_data()
    variants_count = len(data.get('variants', []))
    
    summary = "\n".join([
        f"‚úÖ {v.get('memory', '–ë–ï–ó –ü–ê–ú–Ø–¢–ò')} ({len(v.get('variants_details', []))} —à—Ç.)"
        for v in data.get('variants', [])
    ])
    
    if variants_count > 0:
        await message.answer(
            f"–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ({variants_count}):\n{summary}\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=KEYBOARD_VARIANT_CHOICE
        )
        await state.set_state(AddItemStates.waiting_for_variant_start)
    else:
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
        await message.answer(
             "‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
             "**–ì—Ä—É–ø–ø–∞ #1**\n–í–≤–µ–¥–∏—Ç–µ **–æ–±—ä–µ–º –ø–∞–º—è—Ç–∏** (–Ω–∞–ø—Ä., 256 GB). –ï—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ `-`:"
        )
        await state.set_state(AddItemStates.waiting_for_variant_memory)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤: –î–æ–±–∞–≤–∏—Ç—å/–ó–∞–≤–µ—Ä—à–∏—Ç—å
@router.callback_query(AddItemStates.waiting_for_variant_start, F.data == "add_variant")
async def start_next_variant(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    variants_count = len(data.get('variants', []))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞
    await state.update_data(current_variant={})
    
    await callback_query.message.answer(
        f"**–ì—Ä—É–ø–ø–∞ #{variants_count + 1}**\n–í–≤–µ–¥–∏—Ç–µ **–æ–±—ä–µ–º –ø–∞–º—è—Ç–∏** (–Ω–∞–ø—Ä., 256 GB). –ï—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ `-`:"
    )
    await state.set_state(AddItemStates.waiting_for_variant_memory)


@router.callback_query(AddItemStates.waiting_for_variant_start, F.data == "finish_item")
async def finish_item_creation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None) 
    except Exception as e:
        logging.warning(f"Failed to remove markup: {e}")
    
    data = await state.get_data()
    all_variants = data.get('variants', [])
    
    if not all_variants:
        await callback_query.message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await ask_for_next_variant_step(callback_query.message, state) 
        return
        
    await callback_query.message.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é —Ç–æ–≤–∞—Ä –∏ –≤—Å–µ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    
    # 1. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    final_items_to_send = []
    for group in all_variants:
        memory = group.get('memory')
        for detail in group.get('variants_details', []):
            final_items_to_send.append({
                "name": data['base_name'],
                "description": "", # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                "price": detail['price'],
                "category_id": data['category_id'],
                "memory": memory,
                "color": detail['color'],
                "image_urls": detail.get('image_urls', []), 
                "is_active": True
            })
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        async with httpx.AsyncClient(timeout=30.0) as client: # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            final_response = None
            total_added = 0
            
            for item_data in final_items_to_send:
                response = await client.post(
                    f"{API_URL}/items/",
                    json=item_data
                )
                response.raise_for_status()
                final_response = response.json() 
                total_added += 1

            if total_added > 0:
                 await callback_query.message.answer(
                     f"‚úÖ –¢–æ–≤–∞—Ä '{data['base_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ({total_added} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)!\n"
                     f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π ID: {final_response['id']}"
                 )
            else:
                 await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.")
                 
    except httpx.HTTPStatusError as e:
        logging.error(f"Item creation failed: {e.response.text}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e.response.text}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        logging.error(f"API connection error: {e}")
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API.")

    await state.clear()


# –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø–∞–º—è—Ç–∏
@router.message(AddItemStates.waiting_for_variant_memory, F.text)
async def process_variant_memory(message: types.Message, state: FSMContext):
    memory_input = message.text.strip()
    memory = memory_input if memory_input != '-' else None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π
    await state.update_data(
        current_variant={
            'memory': memory, 
            'colors_list': [], 
            'variants_details': [], 
            'current_color_index': 0
        }
    )
    
    await message.answer(
        "**–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ —Ü–≤–µ—Ç–∞** –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä., Space Gray, Black, Red). \n"
        "–†–∞–∑–¥–µ–ª—è–π—Ç–µ —Ü–≤–µ—Ç–∞ **–∑–∞–ø—è—Ç–æ–π**."
    )
    await state.set_state(AddItemStates.waiting_for_variant_colors_list)


# –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ —Å—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ –¶–µ–Ω–∞/–§–æ—Ç–æ
@router.message(AddItemStates.waiting_for_variant_colors_list, F.text)
async def process_variant_colors_list(message: types.Message, state: FSMContext):
    colors_input = message.text.strip()
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
    colors_list = [c.strip() for c in colors_input.split(',') if c.strip()]
    
    if not colors_list:
        await message.answer("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    data = await state.get_data()
    current_variant = data['current_variant']
    current_variant['colors_list'] = colors_list
    current_variant['variants_details'] = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    current_variant['current_color_index'] = 0 # –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    await state.update_data(current_variant=current_variant)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —Å –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
    await ask_for_color_price(message, state)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¶–µ–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –§–æ—Ç–æ
async def ask_for_color_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_variant = data['current_variant']
    colors_list = current_variant['colors_list']
    index = current_variant['current_color_index']
    
    if index >= len(colors_list):
        # –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—ä–µ–º—É
        variants = data.get('variants', [])
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã
        group_to_save = {
            'memory': current_variant['memory'],
            'variants_details': current_variant['variants_details']
        }
        variants.append(group_to_save)
        
        await state.update_data(variants=variants, current_variant={})
        
        await message.answer(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ '{current_variant.get('memory', '–ë–ï–ó –ü–ê–ú–Ø–¢–ò')}' ({len(colors_list)} —Ü–≤–µ—Ç–æ–≤) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ (—Ü–∏–∫–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞)
        await ask_for_next_variant_step(message, state)
        return
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞
    current_color = colors_list[index]
    await message.answer(
        f"**–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {current_variant.get('memory', '-')}/{current_color}**\n"
        f"–í–≤–µ–¥–∏—Ç–µ **—Ü–µ–Ω—É** –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–Ω–∞–ø—Ä., 199.99):"
    )
    await state.set_state(AddItemStates.waiting_for_color_price)


@router.message(AddItemStates.waiting_for_color_price, F.text)
async def process_variant_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.').strip())
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return
            
        data = await state.get_data()
        current_variant = data['current_variant']
        index = current_variant['current_color_index']
        current_color = current_variant['colors_list'][index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤—Ä–µ–º–µ–Ω–Ω–æ
        current_variant['temp_price'] = price
        await state.update_data(current_variant=current_variant)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ, —É–±–∏—Ä–∞—è –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            f"**–§–æ—Ç–æ –¥–ª—è: {current_variant.get('memory', '-')}/{current_color}**\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ **–æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é** –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.",
            reply_markup=KEYBOARD_SKIP_PHOTO
        )
        await state.set_state(AddItemStates.waiting_for_color_photo)
        
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –®–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
@router.message(AddItemStates.waiting_for_color_photo, F.photo | F.text)
async def process_variant_photo(message: types.Message, state: FSMContext, bot: Bot):
    
    data = await state.get_data()
    current_variant = data['current_variant']
    index = current_variant['current_color_index']
    current_color = current_variant['colors_list'][index]
    
    uploaded_urls = []
    
    is_photo = message.photo and len(message.photo) > 0
    is_skip = message.text and message.text.strip() == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
    
    # –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –ë–ï–ó–û–ü–ê–°–ù–´–ú –°–ü–û–°–û–ë–û–ú
    await message.answer("...", reply_markup=types.ReplyKeyboardRemove()) 

    if is_photo:
        await message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –¥–ª—è {current_color}...")
        
        # --- –õ–û–ì–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û–ì–†–ê–§–ò–ò –ù–ê –°–ï–†–í–ï–† ---
        photo_file = message.photo[-1]
        file_id = photo_file.file_id
        
        file_buffer = None
        try:
            file_info = await bot.get_file(file_id)
            file_buffer = io.BytesIO() 
            await bot.download_file(file_info.file_path, file_buffer)
            file_buffer.seek(0)
            # –í–Ω–∏–º–∞–Ω–∏–µ: –∏–º—è —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, –Ω–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç—É FastAPI
            filename = f"{current_variant.get('memory', 'NoMem')}_{current_color.replace(' ', '_')}.jpg" 
            
            async with httpx.AsyncClient(timeout=30.0) as client: # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                response = await client.post(
                    f"{API_URL}/upload/images/",
                    # 'files' –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (filename, file_object, mime_type)
                    files={"files": (filename, file_buffer, 'image/jpeg')} 
                )
                response.raise_for_status()
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL-–æ–≤
                uploaded_urls = response.json() 
                
            await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–ª—è {current_color} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            
        except httpx.HTTPStatusError as e:
            logging.error(f"Upload failed: {e.response.text}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            await state.set_state(AddItemStates.waiting_for_color_photo)
            await message.answer(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è {current_color} –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.", reply_markup=KEYBOARD_SKIP_PHOTO)
            return
        except Exception as e:
            logging.error(f"Bot file download error: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            await state.set_state(AddItemStates.waiting_for_color_photo)
            await message.answer(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è {current_color} –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'.", reply_markup=KEYBOARD_SKIP_PHOTO)
            return
        finally:
            if file_buffer:
                file_buffer.close()
    
    elif is_skip:
        await message.answer(f"‚è© –§–æ—Ç–æ –¥–ª—è {current_color} –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ —Ç–µ–∫—Å—Ç "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        await message.answer("‚ùå –û–∂–∏–¥–∞—é **—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é** –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=KEYBOARD_SKIP_PHOTO)
        await state.set_state(AddItemStates.waiting_for_color_photo)
        return
    
    # --- 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–≤–µ—Ç—É ---
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    variant_detail = {
        'color': current_color,
        'price': current_variant.get('temp_price'),
        'image_urls': uploaded_urls
    }
    current_variant['variants_details'].append(variant_detail)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
    current_variant['current_color_index'] += 1
    await state.update_data(current_variant=current_variant)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    await ask_for_color_price(message, state)


# --- 4. –£–¥–∞–ª–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–∞ (/—Ç–æ–≤–∞—Ä_—É–¥–∞–ª–∏) ---
@router.message(Command("—Ç–æ–≤–∞—Ä_—É–¥–∞–ª–∏"))
async def cmd_delete_item(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å ID."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    async with httpx.AsyncClient() as client:
        items = await get_items(client)
        if not items:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await state.clear()
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        item_list = "\n".join([f"ID: {item['id']} -> {item['name']} (–¶–µ–Ω–∞: {item['price']})" for item in items])
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ **—É–¥–∞–ª–∏—Ç—å –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ**:\n\n{item_list}"
        )
        await state.set_state(DeleteItemStates.waiting_for_item_id)

@router.message(DeleteItemStates.waiting_for_item_id, F.text)
async def process_item_to_delete(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥."""
    try:
        item_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        return

    async with httpx.AsyncClient() as client:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å
            response = await client.delete(f"{API_URL}/items/{item_id}")
            
            if response.status_code == 204:
                await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID: {item_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            elif response.status_code == 404:
                await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å ID: {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                response.raise_for_status()
            
        except httpx.HTTPStatusError as e:
            logging.error(f"Item deletion failed: {e.response.text}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e.response.text}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        except Exception as e:
            logging.error(f"API connection error during deletion: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")

    await state.clear()


# --- 5. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¶–µ–Ω—ã –¢–æ–≤–∞—Ä–∞ (/—Ç–æ–≤–∞—Ä_—Ü–µ–Ω–∞) ---
@router.message(Command("—Ç–æ–≤–∞—Ä_—Ü–µ–Ω–∞"))
async def cmd_update_price(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å ID."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    async with httpx.AsyncClient() as client:
        items = await get_items(client)
        if not items:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
            await state.clear()
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
        item_list = "\n".join([f"ID: {item['id']} -> {item['name']} (–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {item['price']})" for item in items])
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n{item_list}"
        )
        await state.set_state(UpdateItemPriceStates.waiting_for_item_id)


@router.message(UpdateItemPriceStates.waiting_for_item_id, F.text)
async def process_item_id_for_price(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ü–µ–Ω—ã."""
    try:
        item_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏–≤ –µ–≥–æ —É API
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/items/{item_id}")
            response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (404)
            
            current_item = response.json()
            
            await state.update_data(item_id=item_id, old_price=current_item['price'])
            
            await message.answer(
                f"–¢–æ–≤–∞—Ä: **{current_item['name']}** (ID: {item_id}). –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: **{current_item['price']}**.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1250.50):"
            )
            await state.set_state(UpdateItemPriceStates.waiting_for_new_price)
            
    except ValueError:
        await message.answer("‚ùå ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å ID: {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            logging.error(f"Error fetching item details: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await state.clear() 
    except Exception as e:
        logging.error(f"API connection error: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API.")
        await state.clear()


@router.message(UpdateItemPriceStates.waiting_for_new_price, F.text)
async def process_new_price(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥."""
    try:
        new_price = float(message.text.replace(',', '.').strip())
        if new_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        data = await state.get_data()
        item_id = data['item_id']
        old_price = data['old_price']
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –º–µ–Ω—è–µ–º
        update_data = {"price": new_price}

        async with httpx.AsyncClient() as client:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            response = await client.put(
                f"{API_URL}/items/{item_id}",
                json=update_data
            )
            response.raise_for_status() 
            
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (ID: {item_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n"
                f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: **{old_price}**\n"
                f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: **{new_price}**"
            )
            
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except httpx.HTTPStatusError as e:
        logging.error(f"Item update failed: {e.response.text}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: {e.response.text}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        logging.error(f"API connection error during price update: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")

    await state.clear()


# --- 6. –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---

async def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logging.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
        
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê ADMIN_ID
    if ADMIN_ID == 0:
        logging.error("–û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ –≤ .env. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à ID –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode
    bot = Bot(
        token=BOT_TOKEN, 
        default=DefaultBotProperties(parse_mode="Markdown")
    ) 
    
    dp = Dispatcher()
    dp.include_router(router)
    
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ Telegram...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")




# @router.message(AddItemStates.waiting_for_details, F.text)
# async def process_item_details(message: types.Message, state: FSMContext):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥."""
#     details_text = message.text
#     user_data = await state.get_data()
    
#     memory = None
#     color = None
    
#     if details_text != '-':
#         try:
#             # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π
#             parts = details_text.split(',')
#             for part in parts:
#                 if '–ü–∞–º—è—Ç—å:' in part:
#                     memory = part.split(':')[1].strip()
#                 elif '–¶–≤–µ—Ç:' in part:
#                     color = part.split(':')[1].strip()
#         except:
#             await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–µ—Ç–∞–ª–∏. –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –Ω–∏—Ö.")
#             # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            
#     item_data = {
#         "name": user_data['name'],
#         "description": "–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞.",
#         "price": user_data['price'],
#         "category_id": user_data['category_id'],
#         "memory": memory,
#         "color": color,
#         "image_url": None,
#         "is_active": True
#     }

#     async with httpx.AsyncClient() as client:
#         try:
#             response = await client.post(
#                 f"{API_URL}/items/",
#                 json=item_data
#             )
#             response.raise_for_status()
#             await message.answer(
#                 f"‚úÖ –¢–æ–≤–∞—Ä '{item_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {response.json()['id']}"
#             )
#         except httpx.HTTPStatusError as e:
#              logging.error(f"Item creation failed: {e.response.text}")
#              await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
#         except Exception as e:
#             logging.error(f"API connection error: {e}")
#             await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

#     await state.clear()


# # --- 4. –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---

# async def main() -> None:
#     """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
#     if not BOT_TOKEN:
#         logging.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
#         return
        
#     bot = Bot(token=BOT_TOKEN)
#     dp = Dispatcher()
#     dp.include_router(router)
    
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
#     if ADMIN_ID == 1234567890:
#          logging.warning("!!! –í–ù–ò–ú–ê–ù–ò–ï: ADMIN_ID –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. !!!")

#     logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ Telegram...")
#     await dp.start_polling(bot)


# if __name__ == '__main__':
#     import asyncio
#     # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
#     asyncio.run(main())