import os
import httpx
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ö–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ config.py ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º try/except –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞, —á—Ç–æ–±—ã —ç—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –±—ã–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ,
# –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã - –∏–º–ø–æ—Ä—Ç –∏–∑ main.py, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω app.core.config.
try:
    from app.core.config import settings
    BOT_TOKEN = settings.BOT_TOKEN
    ADMIN_ID = settings.ADMIN_ID
    API_URL = settings.API_URL
except ImportError:
    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ bot.py –Ω–∞–ø—Ä—è–º—É—é. 
    # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ .env –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
    load_dotenv() 
    logging.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä—è–º—ã–µ os.getenv() –¥–ª—è bot.py (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ app.core.config)")
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID_RAW = os.getenv("ADMIN_ID")
    ADMIN_ID = int(ADMIN_ID_RAW) if ADMIN_ID_RAW and ADMIN_ID_RAW.isdigit() else 0
    API_URL = os.getenv("API_URL", "http://127.0.0.1:8888/api/v1")


# --------------------------------------------------------------------------------------
# --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞ –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
# --------------------------------------------------------------------------------------

if not BOT_TOKEN:
    # –ü—Ä–∏ –¥–µ–ø–ª–æ–µ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ main.py
# DefaultBotProperties –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()

# –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.include_router(router) 

# --------------------------------------------------------------------------------------
# --- 2. State Group (FSM) ---
# --------------------------------------------------------------------------------------

class ItemCreation(StatesGroup):
    """FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    name = State()
    description = State()
    price = State()
    category_id = State()
    image_urls = State()
    
# --------------------------------------------------------------------------------------
# --- 3. –•—ç–Ω–¥–ª–µ—Ä—ã ---
# --------------------------------------------------------------------------------------

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def command_start_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n\n"
        f"–≠—Ç–æ –±–æ—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º Mini App.\n"
        f"–í–∞—à ID: <code>{message.from_user.id}</code>. (–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç ID –≤ `.env`)\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ\n"
        f"/add_item - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add_item
@router.message(Command("add_item"))
async def command_add_item_handler(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await state.set_state(ItemCreation.name)
    await message.answer("‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(ItemCreation.name, F.text)
async def process_name(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await state.set_state(ItemCreation.description)
    await message.answer("‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(ItemCreation.description, F.text)
async def process_description(message: types.Message, state: FSMContext) -> None:
    await state.update_data(description=message.text)
    await state.set_state(ItemCreation.price)
    await message.answer("‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤ —Ä—É–±–ª—è—Ö):")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@router.message(ItemCreation.price, F.text)
async def process_price(message: types.Message, state: FSMContext) -> None:
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(price=price)
    await state.set_state(ItemCreation.category_id)
    
    # üí° –ó–¥–µ—Å—å –≤ –∏–¥–µ–∞–ª–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    await message.answer(
        "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3). –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –≤–≤–µ–¥–∏—Ç–µ 1:"
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(ItemCreation.category_id, F.text)
async def process_category_id(message: types.Message, state: FSMContext) -> None:
    try:
        category_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(category_id=category_id)
    await state.set_state(ItemCreation.image_urls)
    await message.answer(
        "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ URL-—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π.\n"
        "–≠—Ç–∏ URL –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API `/upload/images/`.\n"
        "–ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ <b>-</b> (–ø—Ä–æ—á–µ—Ä–∫)."
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ API
@router.message(ItemCreation.image_urls, F.text)
async def process_image_urls(message: types.Message, state: FSMContext) -> None:
    raw_urls = message.text
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ FSM
    data = await state.get_data()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URLs: –µ—Å–ª–∏ '-', —Ç–æ –ø—É—Å—Ç–æ–π JSON-–º–∞—Å—Å–∏–≤, –∏–Ω–∞—á–µ - —Å—Ç—Ä–æ–∫–∞ –∏–∑ URL
    image_urls_for_db = raw_urls if raw_urls.strip() != '-' else '[]'
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π SKU –∏ variants_json, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ö–µ–º–µ ItemCreate
    sku = f"SKU-{data['name'][:3].upper()}-{data['price']}"
    variants_json = '[{"memory": "256GB", "color": "Space Gray", "price_change": 0}]'
    
    item_data = {
        "name": data["name"],
        "description": data["description"],
        "price": data["price"],
        "category_id": data["category_id"],
        "image_urls_json": image_urls_for_db,
        "is_active": True,
        "sku": sku,
        "variants_json": variants_json
    }

    await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ FastAPI
    async with httpx.AsyncClient(timeout=15.0) as client:
        try:
            response = await client.post(
                f"{API_URL}/items/",
                json=item_data
            )
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            new_item = response.json()
            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä <b>{new_item['name']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"ID: <code>{new_item['id']}</code>"
            )
        except httpx.HTTPStatusError as e:
             logging.error(f"Item creation failed: {e.response.text}")
             await message.answer(
                 f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.\n"
                 f"–°—Ç–∞—Ç—É—Å: {e.response.status_code}\n"
                 f"–û—Ç–≤–µ—Ç API: <code>{e.response.text}</code>"
             )
        except Exception as e:
            logging.error(f"API connection error: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <code>{e}</code>")

    await state.clear()
