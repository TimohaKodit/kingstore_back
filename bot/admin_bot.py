import asyncio
import os
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
API_URL = os.getenv("API_URL")  # –ø—Ä–∏–º–µ—Ä: http://127.0.0.1:8000/products/

if not BOT_TOKEN or not API_URL:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å .env ‚Äî –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ API_URL")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
product_data = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")

    await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üõç\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä? –ù–∞–ø–∏—à–∏ /add")

# --- –ö–æ–º–∞–Ω–¥–∞ /add ---
@dp.message(Command("add"))
async def add_product(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.")

    product_data[message.from_user.id] = {"step": "name"}
    await message.answer("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

# --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
@dp.message()
async def process_message(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö

    if user_id not in product_data:
        return await message.answer("–ù–∞–ø–∏—à–∏ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")

    step = product_data[user_id]["step"]

    # === 1. –ù–∞–∑–≤–∞–Ω–∏–µ ===
    if step == "name":
        product_data[user_id]["name"] = message.text
        product_data[user_id]["step"] = "price"
        return await message.answer("üí∞ –í–≤–µ–¥–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ ‚ÇΩ):")

    # === 2. –¶–µ–Ω–∞ ===
    if step == "price":
        try:
            price = float(message.text)
        except ValueError:
            return await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 4999")
        product_data[user_id]["price"] = price
        product_data[user_id]["step"] = "image"
        return await message.answer("üñº –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    # === 3. –ö–∞—Ä—Ç–∏–Ω–∫–∞ ===
    if step == "image":
        product_data[user_id]["image_url"] = message.text
        product_data[user_id]["step"] = "is_used"
        return await message.answer("‚ôªÔ∏è –≠—Ç–æ –ë/–£ —Ç–æ–≤–∞—Ä? (–¥–∞/–Ω–µ—Ç)")

    # === 4. –ë/–£ ===
    if step == "is_used":
        text = message.text.lower()
        is_used = text in ["–¥–∞", "yes", "true", "1"]
        product_data[user_id]["is_used"] = is_used

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        data = {
            "name": product_data[user_id]["name"],
            "price": product_data[user_id]["price"],
            "image_url": product_data[user_id]["image_url"],
            "is_used": is_used
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend
        try:
            response = requests.post(API_URL, json=data, timeout=15)

            if response.status_code == 200:
                await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–∫–æ–¥ {response.status_code})")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É:\n{e}")

        del product_data[user_id]  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())